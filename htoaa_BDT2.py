import sysimport uprootimport numpy as npimport mathimport matplotlib.pyplot as pltimport pandas as pdimport xgboost as xgbfrom analib import PhysObj, Eventfrom info import fileNamesfrom data_manager import processDatafrom sklearn.metrics import roc_curve, aucfrom sklearn.model_selection import train_test_split## process and append them into 1 long dataframe containing all the ## signal and all bg (that I have)## should I be concerned that 200to300 returns only 7 events after the ## selection cutsdata = pd.DataFrame()for fileName in fileNames:     tmpData, colNames = processData(fileName)    data = data.append(tmpData, ignore_index=True)## split data into training and testingrandInt = 7trainData, testData = train_test_split(data, random_state=randInt)## training cls = xgb.XGBClassifier(    n_estimators = 800,    max_depth = 2,     min_child_weight = 1,    learning_rate = 0.01    )cls.fit(trainData[colNames], trainData['target'])print ("XGBoost trained")## data from rocs?proba = cls.predict_proba(trainData[colNames])fpr, tpr, thresholds = roc_curve(trainData['target'], proba[:,1])train_auc = auc(fpr, tpr)print("XGBoost train set auc - {}".format(train_auc))proba = cls.predict_proba(testData[colNames])fprt, tprt, thresholds = roc_curve(testData['target'], proba[:,1])test_auct = auc(fprt, tprt)print("XGBoost test set auc - {}".format(test_auct))fig, ax = plt.subplots()## draw them rocsfig, ax = plt.subplots(figsize=(8, 8))train_auc = auc(fpr, tpr)ax.plot(fpr, tpr, lw=1, color='g',label='XGB train (area = %0.5f)'%(train_auc))ax.plot(fprt, tprt, lw=1, ls='--',color='g',label='XGB test (area = %0.5f)'%(test_auct) )ax.set_ylim([0.0,1.0])ax.set_xlim([0.0,1.0])ax.set_xlabel('False Positive Rate')ax.set_ylabel('True Positive Rate')ax.legend(loc="lower right")ax.grid()fig.savefig("plots/roc.png" )# ## file names + weight# fileNames = {#     'GGH_HPT': 1,#     'QCD_HT200to300': 1, #     'QCD_HT300to500' : 0.259# ,#     # 'QCD_HT500to700' : 0.0515,#     # 'QCD_HT700to1000' : 0.01666,#     # 'QCD_HT1000to1500' : 0.00905,#     # 'QCD_HT1500to2000' : 0.003594,#     # 'QCD_HT2000toInf': 0.001401#     }# f = dict()# events = dict()# ## open them files and get them events# for fileName in fileNames.keys():#     f[fileName] = uproot.open(fileName + '.root')#     events[fileName] = f[fileName].get('Events')# ## var for get stuff out of the events, also used for column names# trainVars = ['FatJet_pt', 'FatJet_eta', 'FatJet_mass', 'FatJet_btagCSVV2', 'FatJet_btagDeepB', 'FatJet_msoftdrop', 'FatJet_btagDDBvL']# cutVars = ['FatJet_btagDDBvL', 'FatJet_btagDeepB', 'FatJet_mass', 'FatJet_msoftdrop', 'FatJet_pt']# allVars = list(set(trainVars + cutVars))# ## dict of PhysObj, each physobj for each sig/bg # data = dict()# for files in fileNames.keys(): #     data[files] = PhysObj(files)#     for var in allVars: #         data[files][var] = pd.Dataframe(events[files].array(var))#         if var == 'FatJet_eta': ## we only want to use positive etas#             data[files][var] = data[files][var].abs()# ## get all PhysObj into an Event Obj# ev = Event(data['GGH_HPT'])# bgSigNames = fileNames.keys()# for i in range(1,len(bgSigNames)):#     ev.register(data[bgSigNames[i]])    